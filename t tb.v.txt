module tb_T_flipflop;

    // Testbench signals
    reg clk;
    reg rst_n;
    reg t;
    wire q;
    wire q_bar;

    // Instantiate the DUT
    T_flipflop dut (
        .clk(clk),
        .rst_n(rst_n),
        .t(t),
        .q(q),
        .q_bar(q_bar)
    );

    // Clock generation
    always #5 clk = ~clk; // Generates a clock with a period of 10 time units

    // Test sequence
    initial begin
        // Initialize signals
        clk = 0;
        rst_n = 0; // Assert reset
        t = 0;

        $display("Time\tReset\tT\tQ\tQ_bar"); // Header for display

        // Apply reset and observe output
        #10;
        $display("%0d\t%b\t%b\t%b\t%b", $time, rst_n, t, q, q_bar);

        // De-assert reset and start testing T input
        rst_n = 1;
        #10; // Wait for a clock cycle after reset release
        $display("%0d\t%b\t%b\t%b\t%b", $time, rst_n, t, q, q_bar);

        // Test T=0 (maintain state)
        t = 0;
        #10; // Wait for one clock cycle
        $display("%0d\t%b\t%b\t%b\t%b", $time, rst_n, t, q, q_bar);

        // Test T=1 (toggle)
        t = 1;
        #10; // Wait for one clock cycle
        $display("%0d\t%b\t%b\t%b\t%b", $time, rst_n, t, q, q_bar);

        // Test T=1 again (toggle)
        t = 1;
        #10; // Wait for one clock cycle
        $display("%0d\t%b\t%b\t%b\t%b", $time, rst_n, t, q, q_bar);

        // Test T=0 (maintain state)
        t = 0;
        #10; // Wait for one clock cycle
        $display("%0d\t%b\t%b\t%b\t%b", $time, rst_n, t, q, q_bar);

        // Finish simulation
        #20;
        $finish;
    end

    // Optional: Dump waveform for visual inspection
    initial begin
        $dumpfile("t_flipflop.vcd");
        $dumpvars(0, tb_T_flipflop);
    end

endmodule